import autogen
from typing import Dict, Any, Optional, List
import logging
from datetime import datetime
import os

from agents.search_agent import SearchAgent
from agents.rule_engineer_agent import RuleEngineerAgent
from agents.validation_agent import ValidationAgent
from utils.vector_db_manager import VectorDBManager
from config.llm_config import LLM_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Orchestrator:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –∏ workflow.
    """
    
    def __init__(self):
        self.llm_config = LLM_CONFIG
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π
        with open('model_config.json', 'r') as f:
            self.model_config = json.load(f)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        self.vector_db_manager = VectorDBManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–µ–π
        self.search_agent = SearchAgent(self.llm_config, self.vector_db_manager)
        self.rule_engineer_agent = RuleEngineerAgent(
            self.llm_config, 
            self.model_config['agents']['Rule_Engineer_Agent']
        )
        self.validation_agent = ValidationAgent(self.llm_config)
        
        logger.info("Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–æ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é")

    def create_positive_test_case(self, code_snippet: str, vulnerability_description: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏.
        
        Args:
            code_snippet: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—å—é
            vulnerability_description: –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–∞–∫ –µ—Å—Ç—å
        return code_snippet

    def create_negative_test_case(self, code_snippet: str, vulnerability_description: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä (–∫–æ–¥ –±–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–∏).
        
        Args:
            code_snippet: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—å—é
            vulnerability_description: –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –±–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è "—á–∏—Å—Ç–æ–≥–æ" –∫–æ–¥–∞
        # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        if "sql" in vulnerability_description.lower():
            return "query = \"SELECT * FROM users WHERE status = 'active'\""
        elif "xss" in vulnerability_description.lower():
            return "element.textContent = userInput"
        else:
            return "# –ß–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\nresult = safe_function()"

    def run_full_workflow(self, code_snippet: str, vulnerability_description: str) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π workflow –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            code_snippet: –ö–æ–¥ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—å—é
            vulnerability_description: –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ workflow
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ workflow –¥–ª—è: {vulnerability_description}")
        
        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        logger.info("–®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª...")
        search_result = self.search_agent.find_relevant_rules(vulnerability_description)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö
        similar_rules = []
        if "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞" in search_result:
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É-–∏–Ω–∂–µ–Ω–µ—Ä—É
            lines = search_result.split("\n")
            for line in lines:
                if line.strip().startswith("ID:"):
                    rule_id = line.split("ID:")[1].split("\n")[0].strip()
                    similar_rules.append({"id": rule_id})
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        logger.info("–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞...")
        rule_result = self.rule_engineer_agent.create_or_update_rule(
            problem_description=vulnerability_description,
            code_example=code_snippet,
            similar_rules=similar_rules if similar_rules else None
        )
        
        if not rule_result["success"]:
            return {
                "success": False,
                "error": rule_result["message"],
                "step": "rule_creation"
            }
        
        # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        logger.info("–®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")
        positive_test = self.create_positive_test_case(code_snippet, vulnerability_description)
        negative_test = self.create_negative_test_case(code_snippet, vulnerability_description)
        
        # –®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞
        logger.info("–®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞...")
        validation_result = self.validation_agent.validate_rule(
            rule_yaml=rule_result["rule_yaml"],
            positive_test=positive_test,
            negative_test=negative_test,
            rule_id=rule_result.get("rule_id", "new_rule")
        )
        
        if not validation_result["success"]:
            return {
                "success": False,
                "error": validation_result.get("error", "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
                "step": "validation",
                "rule_yaml": rule_result["rule_yaml"]  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ
            }
        
        # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        logger.info("–®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞...")
        if validation_result.get("validation_passed", False):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ YAML –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            try:
                import yaml
                rule_data = yaml.safe_load(rule_result["rule_yaml"])
                rule_id = rule_data["rules"][0]["id"] if rule_data and "rules" in rule_data else "new_rule"
                filename = f"{rule_id}.yaml"
            except:
                filename = None
                
            saved_path = self.rule_engineer_agent.save_rule_to_file(
                rule_result["rule_yaml"], filename
            )
        else:
            saved_path = None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "success": True,
            "search_result": search_result,
            "rule_creation_success": rule_result["success"],
            "validation_passed": validation_result.get("validation_passed", False),
            "rule_yaml": rule_result["rule_yaml"],
            "validation_report": validation_result.get("llm_analysis", ""),
            "saved_path": saved_path,
            "is_new_rule": rule_result.get("is_new", True)
        }
        
        logger.info("Workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return result

    def run_interactive_creation_flow(self, code_snippet: str, vulnerability_description: str) -> Dict[str, Any]:
        """
        –ù–æ–≤—ã–π workflow —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.
        
        Args:
            code_snippet: –ö–æ–¥ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—å—é
            vulnerability_description: –û–ø–∏—Å–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ workflow
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ workflow –¥–ª—è: {vulnerability_description}")
        
        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª
        logger.info("–®–∞–≥ 1: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª...")
        search_result_str = self.search_agent.find_relevant_rules(vulnerability_description, n_results=5)
        
        # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        similar_rules_parsed = self._parse_search_results(search_result_str)
        
        # –®–∞–≥ 3: –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        print("\n" + "=" * 50)
        print("–ù–ê–ô–î–ï–ù–´ –°–õ–ï–î–£–Æ–©–ò–ï –ü–û–•–û–ñ–ò–ï –ü–†–ê–í–ò–õ–ê:")
        for i, rule in enumerate(similar_rules_parsed):
            print(f"{i+1}. ID: {rule['id']}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {rule['message']}")
            print(f"   –°—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {rule.get('similarity', 'N/A')}")
            print()
        
        print(f"{len(similar_rules_parsed)+1}. üìù –°–û–ó–î–ê–¢–¨ –ù–û–í–û–ï –ü–†–ê–í–ò–õ–û –° –ù–£–õ–Ø")
        print("=" * 50)
        
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä): "))
        except ValueError:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ.")
            choice = len(similar_rules_parsed) + 1
        
        # –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 1 <= choice <= len(similar_rules_parsed):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∞–≤–∏–ª–∞
            selected_rule = similar_rules_parsed[choice-1]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ: {selected_rule['id']}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ YAML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
            full_rule_yaml = self.vector_db_manager.get_rule_yaml_by_id(selected_rule['id'])
            
            if not full_rule_yaml:
                return {
                    "success": False,
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Å ID: {selected_rule['id']}",
                    "step": "rule_loading"
                }
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –∞–≥–µ–Ω—Ç—É –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
            rule_result = self.rule_engineer_agent.refine_existing_rule(
                base_rule_yaml=full_rule_yaml,
                problem_description=vulnerability_description,
                code_example=code_snippet,
                original_rule_id=selected_rule['id']
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ —Å –Ω—É–ª—è")
            rule_result = self.rule_engineer_agent.create_or_update_rule(
                problem_description=vulnerability_description,
                code_example=code_snippet,
                similar_rules=None  # –°–æ–∑–¥–∞–µ–º —Å –Ω—É–ª—è
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è/–¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª–∞
        if not rule_result["success"]:
            return {
                "success": False,
                "error": rule_result["message"],
                "step": "rule_creation"
            }
        
        # –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        logger.info("–®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")
        positive_test = self.create_positive_test_case(code_snippet, vulnerability_description)
        negative_test = self.create_negative_test_case(code_snippet, vulnerability_description)
        
        logger.info("–®–∞–≥ 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–∞...")
        validation_result = self.validation_agent.validate_rule(
            rule_yaml=rule_result["rule_yaml"],
            positive_test=positive_test,
            negative_test=negative_test,
            rule_id=rule_result.get("rule_id", "new_rule")
        )
        
        # –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        logger.info("–®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞...")
        if validation_result.get("validation_passed", False):
            try:
                import yaml
                rule_data = yaml.safe_load(rule_result["rule_yaml"])
                rule_id = rule_data["rules"][0]["id"] if rule_data and "rules" in rule_data else "new_rule"
                filename = f"{rule_id}.yaml"
            except:
                filename = None
                
            saved_path = self.rule_engineer_agent.save_rule_to_file(
                rule_result["rule_yaml"], filename
            )
        else:
            saved_path = None
            logger.warning("–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "success": True,
            "user_choice": "refine" if 1 <= choice <= len(similar_rules_parsed) else "create_new",
            "selected_rule_id": similar_rules_parsed[choice-1]["id"] if 1 <= choice <= len(similar_rules_parsed) else None,
            "search_result": search_result_str,
            "rule_creation_success": rule_result["success"],
            "validation_passed": validation_result.get("validation_passed", False),
            "rule_yaml": rule_result["rule_yaml"],
            "validation_report": validation_result.get("llm_analysis", ""),
            "saved_path": saved_path,
            "is_new_rule": rule_result.get("is_new", True)
        }
        
        logger.info("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return result
    def _parse_search_results(self, search_result_str: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª.
        
        Args:
            search_result_str: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç SearchAgent
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∞–≤–∏–ª–∞—Ö
        """
        similar_rules = []
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–∞—Ä—Å–∏–º
            lines = search_result_str.split('\n')
            current_rule = {}
            
            for line in lines:
                line = line.strip()
                if line.startswith('ID:'):
                    if current_rule and 'id' in current_rule:
                        similar_rules.append(current_rule)
                    current_rule = {'id': line.replace('ID:', '').strip()}
                elif line.startswith('Message:'):
                    current_rule['message'] = line.replace('Message:', '').strip()
                elif line.startswith('Similarity:'):
                    similarity_str = line.replace('Similarity:', '').strip()
                    try:
                        current_rule['similarity'] = float(similarity_str)
                    except ValueError:
                        current_rule['similarity'] = similarity_str
                elif line.startswith('Source:'):
                    current_rule['source'] = line.replace('Source:', '').strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            if current_rule and 'id' in current_rule:
                similar_rules.append(current_rule)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {str(e)}")
        
        return similar_rules

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    orchestrator = Orchestrator()
    orchestrator.run_interactive_workflow()

if __name__ == "__main__":
    main()